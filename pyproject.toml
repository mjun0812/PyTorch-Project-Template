[project]
name = "pytorch-project-template"
version = "5.0.0"
description = ""
authors = [{ name = "Junya Morioka", email = "mjun@mjunya.com" }]
requires-python = ">=3.11"
dependencies = [
    "torch==2.6.0+cu124; sys_platform == 'linux' and platform_machine == 'x86_64'",
    "torch==2.6.0; sys_platform == 'darwin' or (sys_platform == 'linux' and platform_machine == 'aarch64')",
    "torchvision==0.21.0+cu124; sys_platform == 'linux' and platform_machine == 'x86_64'",
    "torchvision==0.21.0; sys_platform == 'darwin' or (sys_platform == 'linux' and platform_machine == 'aarch64')",
    "mlflow>=2.20.3",
    "torchmetrics>=1.4.1",
    "tqdm>=4.66.5",
    "matplotlib>=3.9.2",
    "omegaconf>=2.3.0",
    "python-dotenv>=1.0.1",
    "torchinfo>=1.8.0",
    "einops>=0.8.0",
    "loguru>=0.7.2",
    "pandas>=2.2.2",
    "tabulate>=0.9.0",
    "natsort>=8.4.0",
    "wandb>=0.17.7",
    "schedulefree>=1.4",
]

[tool.uv]
dev-dependencies = ["jupyter>=1.0.0", "pytest>=8.3.2", "ruff>=0.6.2"]

[[tool.uv.index]]
name = "torch-cuda"
url = "https://download.pytorch.org/whl/cu124"
explicit = true

[[tool.uv.index]]
name = "torch-cpu"
url = "https://download.pytorch.org/whl/cpu"
explicit = true

[tool.uv.sources]
torch = [
    { index = "torch-cuda", marker = "sys_platform == 'linux' and platform_machine == 'x86_64'" },
    { index = "torch-cpu", marker = "sys_platform == 'darwin' or (sys_platform == 'linux' and platform_machine == 'aarch64')" },
]
torchvision = [
    { index = "torch-cuda", marker = "sys_platform == 'linux' and platform_machine == 'x86_64'" },
    { index = "torch-cpu", marker = "sys_platform == 'darwin' or (sys_platform == 'linux' and platform_machine == 'aarch64')" },
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.pyright]
typeCheckingMode = "off"
exclude = ["dataset", "result", ".tmp", ".git", ".venv", ".vscode"]

[tool.ruff]
exclude = [".git", ".ruff_cache", ".venv", ".vscode", "dataset", "result"]
line-length = 100
target-version = "py311"

[tool.ruff.lint]
select = [
    "E", # pycodestyle errors
    "W", # pycodestyle warnings
    "F", # pyflakes
    "B", # flake8-bugbear
    "I", # isort
]
ignore = [
    "B007",   # ループ変数が未使用です
    "B008",   # メソッドの引数に関数を渡しています
    "B905",   # `zip()`にstrict=Trueパラメータが必要です
    "COM812", # 後続のカンマが欠落しています
    "COM819", # 末尾のカンマが禁止されている箇所に存在します
    "D100",   # モジュールのdocstringが見つかりません
    "D203",   # クラスdocstringの前に1行空行が必要です
    "D212",   # マルチラインdocstringの概要は最初の行にある必要があります
    "D213",   # マルチラインdocstringの概要は2行目から始める必要があります
    "D300",   # docstringは三重引用符を使用する必要があります
    "D400",   # docstringの最初の行は終止符で終わる必要があります
    "D415",   # docstringの最初の行はピリオドで終わる必要があります
    "E111",   # インデントが不正です
    "E114",   # インデントが不正です(コメント行)
    "E117",   # 過剰なインデントです
    "E501",   # line too long, handled by black
    "G004",   # loggingでf-stringを使いたいので無視する
    "ISC001", # 不適切なソート順序です（import文）
    "ISC002", # import文の間に余分な改行があります
    "Q000",   # シングルクォートとダブルクォートの使用が一貫していません
    "Q001",   # シングルクォートを使用する必要があります
    "Q002",   # ダブルクォートを使用する必要があります
    "Q003",   # docstringにはダブルクォートを使用する必要があります
]
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.per-file-ignores]
# ファイルごとのエラー除外
"__init__.py" = ["F401"] # __all__の定義を無視する

[tool.ruff.lint.pydocstyle]
convention = "google"
